"use strict";window.addEventListener("DOMContentLoaded",()=>{let e={};const t=window.location.pathname,o=window.location.hash,n=document.querySelector("body"),s=n.querySelector(".j-doc-nav__wrapper").querySelector(".j-doc-nav__list"),i=s.querySelectorAll(`a[href*="${t}"]`),c=document.querySelector(".j-options-container--mobile"),a=document.querySelector(".j-options-container--desktop"),r=document.querySelectorAll(".j-doc-options__select"),l=document.querySelector(".j-sidebar__menu-container"),d=s.querySelectorAll(".j-doc-nav__section"),p=document.querySelector(".j-sidebar__menu-details-button--expand"),m=document.querySelector(".j-sidebar__menu-details-button--collapse"),u=window.matchMedia("(min-width: 1000px)"),h=window.matchMedia("(min-width: 1400px)"),f=()=>!u.matches,g=()=>n.classList.remove("j-has-opened-doc-menu","j-has-opened-doc-menu--toc","j-has-opened-doc-menu--options--mobile","j-has-opened-doc-menu--options--desktop"),w=(e,t)=>{"desktop"===t&&e&&l&&!l.open?l.open=!0:"tablet"===t&&e&&l&&l.open&&(l.open=!1),l.classList.contains("j-sidebar__menu-container--processed")||l.classList.add("j-sidebar__menu-container--processed")},b=(e,t)=>{"desktop"===t&&e&&a&&!a.open?a.open=!0:"tablet"===t&&e&&a&&a.open&&(a.open=!1),a.classList.contains("j-options-container--desktop--processed")||a.classList.add("j-options-container--desktop--processed")},v=(e,t)=>{"tablet"===t&&e&&c&&c.open&&(c.open=!1)};function y(e){if(!e.defaultPrevented){switch(e.key){case"Esc":case"Escape":w(f(),"tablet"),v(f(),"tablet"),b(u.matches,"tablet");break;default:return}e.preventDefault()}}function k(t){t||(c.open?t="options--mobile":a.open?t="options--desktop":a&&(t="toc")),n.classList.add("j-has-opened-doc-menu",`j-has-opened-doc-menu--${t}`),e.escListener||(e.escListener="escListener",window.addEventListener("keydown",y)),e.clickListener||(e.clickListener="clickListener",window.addEventListener("mouseup",L))}function _(){g(),e.escListener&&(window.removeEventListener("keydown",y),delete e.escListener),e.clickListener&&(window.removeEventListener("mouseup",L),delete e.clickListener)}function L(e){let t=e.target;"function"==typeof t.closest&&(t.closest(".j-sidebar__menu-container, .j-options-container")||(l.open&&w(f(),"tablet"),c.open&&v(f(),"tablet"),a.open&&b(u.matches,"tablet"),_()))}function E(){const e=document.querySelector(".is-active");let t=null;if(i.length>0)for(let e=0;e<i.length;e++){const n=i[e];n.hash===o&&(t=n)}else{if(!e)return;t=e}if(t){const e=t.parentElement.querySelector(".j-doc-nav__section");e&&(e.open=!0,e.classList.add("j-doc-nav__section--active-section"));let o=0;const n=e=>{const t=e.closest(".j-doc-nav__section, .j-doc-nav__children-wrapper");t&&(t.open||(t.open=!0),++o<6&&n(t.parentElement))};n(t)}}w(u.matches,"desktop"),v(u.matches,"tablet"),b(h.matches,"desktop"),b(!h.matches,"tablet"),u.addEventListener("change",e=>{w(e.matches,"desktop"),v(e.matches,"tablet"),b(e.matches,"tablet"),e.matches&&(g(),c.open&&_())}),h.addEventListener("change",e=>{b(e.matches,"desktop"),b(!e.matches,"tablet")}),w(f(),"tablet"),v(f(),"tablet"),u.addEventListener("change",e=>{w(!e.matches,"tablet"),v(!e.matches,"tablet")});const j=document.getElementsByClassName("j-doc-nav__link");for(let e=0;e<j.length;e++)j[e].addEventListener("click",()=>{w(f(),"tablet")});function S(e){const t=e.target.value;window.location.assign(t)}l.addEventListener("toggle",()=>{f()&&(l.open?k("toc"):_())}),c.addEventListener("toggle",()=>{f()&&(c.open?k("options--mobile"):_())}),a.addEventListener("toggle",()=>{u.matches&&!h.matches&&(a.open?k("options--desktop"):_())});for(let e=0;e<r.length;e++)r[e].addEventListener("change",S);m&&m.addEventListener("click",function(){for(let e=0;e<d.length;e++){const t=d[e];t.open&&(t.open=!1)}E()}),p&&p.addEventListener("click",function(){for(let e=0;e<d.length;e++){const t=d[e];t.open||(t.open=!0)}}),E()}),(()=>{const e=window.location.pathname.indexOf("/html-single/")>1,t=window.location.pathname,o=t.split("/");let n,s,i,c,a=!1;const r=["dxp-documentation-platform.docksal","access.qa.redhat.com","access.stage.redhat.com"];document.addEventListener("wheel",()=>{a=!0},{once:!0});const l=()=>!!location.hostname.startsWith("dxp-docp-preview-")||(r.indexOf(location.hostname)>=0||!!(n=n||document.querySelector("body")).hasAttribute("debug"));e&&"index"!==o[o.length-1]&&(o.pop(),location.assign(`${o.join("/")}/index`));const d={mobile:0,tablet:1e3,desktopSmall:1200,desktop:1400},p=["mobile","tablet","desktopSmall","desktop"],m=e=>{if(l()&&console.log("scrollToAnchor, start",{hash:location.hash,scrollPosition:[window.scrollX,window.scrollY]}),!window.location.hash)return;"#"===e.substring(0,1)&&(e=e.substring(1));const t=document.getElementById(e),o=e?(e=>{const t=e.getBoundingClientRect();if(t&&t.top)return Math.round(e.getBoundingClientRect().top+window.scrollY)})(t):0;if(t&&o){let e=20;const t=(()=>{const e=window.innerWidth;for(let t=1;t<p.length;t++)if(e<d[p[t]])return p[t-1];return p[p.length-1]})();switch(t){case"mobile":e=80;break;case"tablet":case"desktopSmall":e=100}const n=o-e;Math.abs(n-window.scrollY)>15&&window.scrollTo(window.scrollX,n),l()&&console.log("scrollToAnchor, scrolled to",{breakpoint:t,hash:location.hash,elementYOffset:o,"window.pageYOffset":window.pageYOffset,scrollPosition:[window.scrollX,window.scrollY],scrollToY:n})}},u=()=>{const e=location.hash.substring(1);document.getElementById(e)||(a=!0),a?l()&&console.log("scrollToUrlAnchor, didn't fire, user has scrolled"):(l()&&console.log("scrollToUrlAnchor, firing"),m(e))},h=(e,t)=>{l()&&console.log("anchorLinkClick, entered helper function",{hash:location.hash,scrollPosition:[window.scrollX,window.scrollY]}),e.preventDefault(),location.hash=t,m(t),l()&&console.log("anchorLinkClick, end of helper function",{hash:location.hash,scrollPosition:[window.scrollX,window.scrollY]})},f=(e,t)=>{const o=e.closest(".j-doc-nav__section, .j-doc-nav__children-wrapper");o&&((e=>{e.open||(e.open=!0)})(o),(0===t||t)&&++t<6&&f(o.parentElement,t))},g=e=>{const t=e.split("#");let o=t[1]?t[1]:null;return o&&o.indexOf("?")>-1&&(o=t[1].split("?")[0]),o};window.addEventListener("DOMContentLoaded",()=>{n=n||document.querySelector("body"),i=i||document.getElementById("pvof-doc__toc"),c=c||i.closest(".pvof-sidebar__inner-wrapper");const t=document.querySelector('.skip-link[href="#cp-main"]');(s=s||document.getElementById("doc-wrapper"))||(s=document.querySelector(".doc-wrapper")),t&&s&&("doc-wrapper"!==s.id&&(s.id="doc-wrapper"),t.setAttribute("href","#doc-wrapper")),e&&(e=>{const t=e.querySelectorAll(".title");for(let e=0;e<t.length;e++){const o=t[e],n=new RegExp(String.fromCharCode(160),"g"),s=o.innerText.replace(n," ");s!==o.innerText&&(o.innerText=s)}})(s);const o=document.querySelector(".j-sidebar__menu-trigger__open-text");o&&(o.innerText="Jump to");const a=s.querySelectorAll("pre, .j-doc-nav__wrapper");for(let e=0;e<a.length;e++){a[e].setAttribute("tabindex","0")}c.addEventListener("wheel",e=>{for(let t=0;t<e.path.length;t++)if(c.scrollHeight>c.offsetHeight)if(e.deltaY<0){if(0===c.scrollTop){e.preventDefault();break}}else if(e.deltaY>0&&c.scrollTop+c.offsetHeight>=c.scrollHeight){e.preventDefault();break}}),window.location.hash&&(u(),window.addEventListener("load",()=>{u()}))});const w=t=>{const o=s.querySelectorAll(".pvof-doc__wrapper table");if(!o.length)return;(e=>{e.include("@cpelements/rh-table/dist/rh-table.umd.min");const t=window.portal.host?window.portal.host:"https://access.redhat.com",o=window.portal.version?window.portal.version:"",n=document.createElement("link");n.setAttribute("rel","stylesheet"),n.setAttribute("media","all"),n.setAttribute("href",`${t}/webassets/avalon/j/public_modules/node_modules/@cpelements/rh-table/dist/rh-table--lightdom.min.css?v=${o}`),document.querySelector("head").append(n)})(t);const n=e=>{for(let t=0;t<e.length;t++){const e=o[t];if(null!==e.parentElement&&(e.parentElement.classList.contains("table-contents")||e.parentElement.classList.contains("informaltable"))){const t=e.parentElement,o=document.createElement("rh-table");o.classList.add("table-contents");const n=t.offsetHeight;n>10&&(t.style.height=`${n}px`),o.append(e),t.replaceWith(o)}}};if(o.length<5)n(o);else{const t=Array.from(o),s=t.splice(0,4);n(s);const i=()=>{n(t),e&&window.location.hash&&(u(),l()&&console.log("processOtherTables scrolledToAnchor"))};window.setTimeout(i,1e3)}},b=(e,t=!1)=>{window.setTimeout(()=>{if(i=i||document.getElementById("pvof-doc__toc"),c=c||i.closest(".pvof-sidebar__inner-wrapper"),e){const o=e.offsetHeight,n=e.getBoundingClientRect().top,s=o+n,i=c.offsetHeight,a=c.scrollTop,r=a+i,d=n+a,p=s+a;let m=d+.4*i;if(!t){const e=d<a+20,t=p>r-40;if(l()&&console.log("makeSureTocLinkIsVisible, not center logging",{linkIsAboveTop:e,linkIsBelowBottom:t,tocLinkHeight:o,tocLinkTop:n,tocLinkBottom:s,sidebarHeight:i,topOfVisibleArea:a,bottomOfVisibleArea:r}),!e&&!t)return void(l()&&console.log("makeSureTocLinkIsVisible: link isn't offscreen, not centering, exiting."));e?m=d-.25*i+o:t&&(m=d-.75*i+o)}c.scrollTo({top:m,behavior:"smooth"})}},10)},v=()=>{const e=()=>{chrometwo_require(["jquery","lodash"],function(e,t){function o(t,o){var n=e("body");t.on("click",function(n){n.preventDefault(),function(t,o){var n=e("body"),s=t.attr("title")?t.attr("title"):"",i="",c="",a=!1;if(null!==o.match(/\.(jpeg|jpg|gif|png)/))i='<img src="'+o+'" alt="'+s+'">',c='<div class="zoom-larger"><a href="'+o+'" title="Opens in a new window" target="_blank">View larger image<span class="sr-only"> (Opens in a new window)</span></a></div>',a=!0;else{var r=function(e){return e.match(/youtube\.com\/(watch\?v=|embed\/)(\w*)[\&\?](.*\=.*)/)}(o);if(null!=r){var l=t.attr("data-aspect-ratio");void 0===l&&(l="16:9"),i='<div class="video-wrapper" data-aspect-ratio="'+l+'"><iframe width="560" height="315" src="https://www.youtube.com/embed/'+r[2]+"?"+r[3]+'&rel=0" target="_parent" frameborder="0" allowfullscreen></iframe></div>',c="",a=!0}}a&&(n.addClass("zoom-open"),n.append('<div class="zoom-modal in" tabindex="-1" role="dialog"><div class="zoom-wrap"><button type="button" class="close" aria-hidden="true">×</button><div class="zoom-body">'+i+"</div>"+c+"</div></div>"),n.append('<div class="zoom-backdrop in"></div>'))}(t,o)}),n.on("click",function(t){var o=e(t.target),s=o.attr("class");("close"===s&&o.parent().hasClass("zoom-wrap")||"zoom-modal in"===s||"zoom-backdrop in"===s)&&(e(".zoom-modal, .zoom-backdrop").remove(),n.removeClass("zoom-open"))}),document.body.addEventListener("keydown",function(t){var o=e(".zoom-modal, .zoom-backdrop");if(e(n).hasClass("zoom-open"))switch(t.key){case"Esc":case"Escape":o.remove(),n.removeClass("zoom-open");default:return}})}e("[data-action]").each(function(){var t=e(this),n=t.attr("data-action");if("zoom"===n){var s=t.attr("href");o(t,s)}else"modal"===n&&function(){e("[data-cp-modal-target]").on("click",function(t){t.preventDefault();var o=e(e(this).attr("data-cp-modal-target"));o.addClass("in"),o.next(".cp-modal-backdrop").addClass("in")});var t=e("body");t.on("click",function(o){var n=e(o.target),s=n.attr("class");(n.hasClass("cp-modal-close")||"cp-modal in"===s||"cp-modal-backdrop in"===s)&&(e(".cp-modal, .cp-modal-backdrop").removeClass("in"),t.removeClass("cp-modal-open"))}),document.body.addEventListener("keydown",function(o){var n=e(".cp-modal, .cp-modal-backdrop");if(e(t).hasClass("cp-modal-open"))switch(o.key){case"Esc":case"Escape":n.removeClass("in"),t.removeClass("cp-modal-open");default:return}})}()}),e(".inlinemediaobject img, .mediaobject img").each(function(){var t=e(this),n=new Image,s=e(".doc-wrapper").width();if(n.src=t.attr("src"),n.naturalWidth>s){let e=t.attr("src"),n=t.attr("alt");t.wrap('<a href="'+e+'" class="rh_docs--zoom" title="'+n+'"></a>'),o(t.parent(),e)}})})};window.innerWidth>500&&window.setTimeout(e,500)},y=()=>{function e(e){var t=document.createElement("script");t.src=e,document.body.appendChild(t)}if(void 0===Drupal.state||"undefined"===Drupal.state.launchDdf)return void console.warn("DDF was not loaded. Either this product is not on the 'allow list' for DDF, or there is an error.");if(window.innerWidth<1400)return void console.warn("DDF was not loaded. The screen size is too small to accomodate DDF's UI, a quick fix is to zoom out or increase the window size until the right sidebar appears and refresh the page.");let t=portal.session.getEncodedToken();if(!t){const e=document.cookie.match("(^|;)\\s*rh_jwt\\s*=\\s*([^;]+)");e&&e.length&&(t=t.pop())}t?(console.log("DDF should be loading shortly."),e(drupalSettings.red_hat_documentation.inquiry_host+"/config.js?inject=.pvof-doc__tertiary-sidebar__inner&feedback_jail=.pvof-doc__wrapper&token="+t),e(drupalSettings.red_hat_documentation.inquiry_host+"/embed.js")):(t="",console.warn("DDF was not loaded. There was a problem getting the SSO token for DDF."))};window.addEventListener("load",()=>{chrometwo_require(["wc"],w),(()=>{const e=(s=s||document.getElementById("doc-wrapper")).querySelectorAll("dl.calloutlist");for(let t=0;t<e.length;t++){const o=e[t].querySelectorAll("dt");for(let e=0;e<o.length;e++){const t=o[e].querySelector("a");t.classList.add("colist-num");const n=t.querySelector("span"),s=n.innerText;n.remove();const i=document.createElement("i");i.innerText=s,i.classList.add("conum"),t.appendChild(i);let c=t.getAttribute("href");c.startsWith("#")&&(c=c.substring(1)),t.id="footnote--"+c;const a=document.getElementById(c);a.id="parent."+c;const r=a.parentElement.querySelector(".callout"),l=r.innerText,d=document.createElement("a");d.classList.add("colist-num"),d.setAttribute("href","#footnote--"+c);const p=document.createElement("i");p.classList.add("conum"),p.innerText=l,p.id=c,d.appendChild(p),a.appendChild(d),r.remove(),t.addEventListener("click",e=>{const o=g(t.getAttribute("href"));h(e,o)}),d.addEventListener("click",e=>{const t=g(d.getAttribute("href"));h(e,t)})}}})(),(()=>{var e=s.querySelectorAll(".doc-wrapper pre");const t=t=>{const o=e=>{!e.hasAttribute("class")&&!e.getAttribute("class").indexOf("language-")>-1&&e.classList.add("language-none");try{t.highlightElement(e,!1)}catch(e){console.error(e)}};if(e.length<5)for(var n=0;n<e.length;n++)o(e[n]);else{const t=Array.from(e),n=t.splice(0,4);for(var s=0;s<n.length;s++)o(n[s]);const i=()=>{for(var e=0;e<t.length;e++)o(t[e]);l()&&console.log("processTheOtherCodeBlocks, processed"),u()};window.setTimeout(i,2e3)}u()};e.length&&chrometwo_require(["prism"],t)})(),(()=>{const o=document.getElementById("pvof-doc__toc");if(void 0!==o.anchorLinkMap||void 0!==o.anchorOrder)return;let n,s,i,c=`[href^="${t}#"]`;e&&(c=`${c}, [href^="${i=t.substring(0,t.length-6)}"]`);const a=o.querySelectorAll(c);for(let e=0;e<a.length;e++){const t=a[e],o=t.getAttribute("href"),n=g(o);n&&(t.setAttribute("href",`#${n}`),t.addEventListener("click",e=>{h(e,n)}),s||(s=[]),s.push(t))}let r=`[href="${t}"]`;e&&(r=`${r}, [href="${i}"]`),n=o.querySelector(r),s||(s=o.querySelectorAll(`[href^="${window.location.pathname}#"]`,'[href^="#"]')),n&&(n.setAttribute("href","#doc-wrapper"),s&&s.length?(s.unshift||(s=Array.from(s)),s.unshift(n)):(n.classList.contains("is-active")||n.classList.add("is-active"),location.hash&&(f(n,0),b(n,!0))))})(),(()=>{if("function"!=typeof IntersectionObserver)return;const e=i.querySelectorAll('[href^="#"]'),t=i.querySelectorAll("a.is-active");i.tocMap={};const o=e=>{const t=i.tocMap[e];if(t){if(t.link){const o=t.link;i.scrolledToElement&&i.tocMap[i.scrolledToElement]&&i.tocMap[i.scrolledToElement].link.classList.remove("is-active"),o.classList.add("is-active"),i.scrolledToElement=e,f(o,0),b(o)}}else console.error(`Couldn't find data for ${e}`)},n=new IntersectionObserver(e=>{const t=[];for(let o=0;o<e.length;o++){const n=e[o].target.id,s=e[o].isIntersecting;t.push({id:n,isIntersecting:s}),i.tocMap[n].isIntersecting=s}const n=Object.keys(i.tocMap).filter(e=>{if(i.tocMap[e].isIntersecting)return e});if(1===n.length)o(n[0]);else if(n.length){const e=`#${n.join(", #")}`;let t;for(let s=0;s<n.length;s++){const c=n[s];if(!i.tocMap[c].section.querySelectorAll(e).length){o(t=c),l()&&console.log("found active section",t);break}}}},{rootMargin:"-50% 0px"});for(let e=0;e<t.length;e++)t[e].classList.remove("is-active");for(let t=0;t<e.length;t++){const o=e[t],s=g(o.getAttribute("href")),c=s?document.getElementById(s):null;c&&(i.tocMap[s]={link:o,section:c},n.observe(c))}})(),s.querySelector(".inlinemediaobject img, .mediaobject img, [data-action]")&&v(),window.setTimeout(y,500)})})(),window.addEventListener("DOMContentLoaded",()=>{const e=document.querySelector(".j-superdoc"),t=document.querySelector(".j-superdoc__nav"),o=e.querySelector(".j-doc__tertiary-sidebar"),n=e.querySelector(".j-doc__tertiary-sidebar__inner"),s="reading_mode_status",i=864e5;if("function"==typeof IntersectionObserver&&new IntersectionObserver(([e])=>e.target.classList.toggle("j-doc__tertiary-sidebar--sticky",e.intersectionRatio<1),{threshold:[1]}).observe(o),e.classList.contains("j-reading-mode-initialized")||!n)return;function c(){e.classList.toggle("j-reading-mode--enabled");const o=document.querySelectorAll('[id^="reading-mode-checkbox"]'),n=window.location.href,c=d(n);if(e.classList.contains("j-reading-mode--enabled")){t.setAttribute("aria-hidden","true"),function(e,t,o){const n=new Date,s=d(t),i={value:t,expiry:n.getTime()+o};let c=l(e);c||(c={});let a=s.product+"/"+s.version+"/"+s.doc_name;c[a]=i;try{localStorage.setItem(e,JSON.stringify(c))}catch(e){}}(s,n,i),setTimeout(()=>{e.classList.add("j-reading-mode--animation-complete")},400);for(let e=0;e<o.length;e++){const t=o[e];t.checked||(t.checked=!0)}}else{t.removeAttribute("aria-hidden"),e.classList.remove("j-reading-mode--animation-complete"),setTimeout(()=>{e.classList.contains("j-reading-mode--animation-complete")&&e.classList.remove("j-reading-mode--animation-complete")},400);for(let e=0;e<o.length;e++){const t=o[e];t.checked&&(t.checked=!1)}if(a(s,c)){let e=l(s);r(s,c,e)}}}function a(e,t){let o=l(e);if(!o)return null;const n=o[t.product+"/"+t.version+"/"+t.doc_name];return n?(new Date).getTime()>n.expiry?(r(e,t,o),null):n.value:null}function r(e,t,o){try{delete o[t.product+"/"+t.version+"/"+t.doc_name],localStorage.setItem(e,JSON.stringify(o))}catch(e){}}function l(e){let t;try{t=localStorage.getItem(e)}catch(e){}return t?JSON.parse(t):null}function d(e){let t=new URL(e).pathname.substring(1).split("/");return{product:t[2],version:t[3],doc_name:t[5]}}const p=document.createElement("div");p.id="j-reading-mode-toggle",p.classList.add("j-switch__wrapper","j-reading-mode__toggle");const m=document.createElement("input");m.type="checkbox",m.name="reading-mode",m.value="false",m.id="reading-mode-checkbox",m.classList.add("j-reading-mode","j-switch__input","visually-hidden");const u=document.createElement("label");u.htmlFor="reading-mode-checkbox",u.innerText="Focus mode",u.classList.add("j-switch__label");const h=document.createElement("span");h.classList.add("j-reading-mode__shortcut-hint"),h.hidden=!0,h.innerHTML="<kbd>F</kbd>",u.append(h);const f=document.createElement("div");f.classList.add("j-switch"),u.append(f),p.appendChild(m),p.appendChild(u),n.prepend(p);const g=document.querySelectorAll(".j-reading-mode__shortcut-hint");document.addEventListener("keydown",e=>{const t=["text","password","number","email","tel","url","search","date","datetime","datetime-local","time","month","week","cp-search-autocomplete"],o=document.activeElement;switch(e.key){case"Tab":for(let e=0;e<g.length;e++){const t=g[e];!0===t.hidden&&(t.hidden=!1)}break;case"r":case"f":t.includes(o.tagName.toLowerCase())||e.getModifierState("Alt")||e.getModifierState("Shift")||e.getModifierState("Control")||e.getModifierState("Meta")||c()}});const w=document.querySelectorAll('[id^="reading-mode-checkbox"]');for(let e=0;e<w.length;e++)w[e].addEventListener("input",c);e.classList.add("j-reading-mode-initialized");const b=d(window.location.href);a(s,b)&&c()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
